module.exports = createComment;

const BOT_LOGIN = "github-actions[bot]";

const DIVIDER = "\n\n---\n\n*";
const PREVIEW = `${DIVIDER}Preview using `;
const UPDATED = `${DIVIDER}**Updated** preview using `;
const SIGNATURE =
  " generated by [Twitter, together!](https://github.com/twitter-together/action)*";

async function createComment({ octokit, payload }, summary) {
  const comment = `${summary.title}${summary.body}`;
  // check for existing comments.
  const comments = await octokit.request(
    "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
    {
      owner: payload.repository.owner.login,
      repo: payload.repository.name,
      issue_number: payload.pull_request.number,
    }
  );

  const match = comments.data.find(
    ({ user, body }) => user.login === BOT_LOGIN && body.endsWith(SIGNATURE)
  );

  if (match) {
    // update the existing comment
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}",
      {
        owner: payload.repository.owner.login,
        repo: payload.repository.name,
        comment_id: match.id,
        body: `${comment}${UPDATED}${payload.pull_request.head.sha}${SIGNATURE}`,
      }
    );
  } else {
    // post a new comment
    await octokit.request(
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
      {
        owner: payload.repository.owner.login,
        repo: payload.repository.name,
        issue_number: payload.pull_request.number,
        body: `${comment}${PREVIEW}${payload.pull_request.head.sha}${SIGNATURE}`,
      }
    );
  }
}
